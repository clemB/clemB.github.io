{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Cours - Conception Web Nous \u00e9tudions dans ce cours les deux langages de programmation \u00e0 la base de tous les sites web : HTML et CSS . Les outils Les navigateurs web (Chrome, Firefox, Op\u00e9ra, Safari, Edge, et d'autres ) traduisent les codes HTML et CSS en ce que vous voyez \u00e0 l'\u00e9cran. Tout ce dont nous avons besoin pour construire un site web c'est : un navigateur (je recommande Chrome , pour ces outils de d\u00e9veloppement); un \u00e9diteur de texte (je recommande Brackets mais le Bloc-notes suffit). Lorsque vous ouvrez un fichier HTML (extension .html ) dans un \u00e9diteur de texte, vous pouvez voir et modifier le code ; quand vous ouvrez ce m\u00eame fichier dans votre navigateur, vous voyez le r\u00e9sultat visuel. Ressources Vous pourrez retrouver des ressources compl\u00e9mentaires dans le dernier chapitre.","title":"Cours - Conception Web"},{"location":"#cours-conception-web","text":"Nous \u00e9tudions dans ce cours les deux langages de programmation \u00e0 la base de tous les sites web : HTML et CSS .","title":"Cours - Conception Web"},{"location":"#les-outils","text":"Les navigateurs web (Chrome, Firefox, Op\u00e9ra, Safari, Edge, et d'autres ) traduisent les codes HTML et CSS en ce que vous voyez \u00e0 l'\u00e9cran. Tout ce dont nous avons besoin pour construire un site web c'est : un navigateur (je recommande Chrome , pour ces outils de d\u00e9veloppement); un \u00e9diteur de texte (je recommande Brackets mais le Bloc-notes suffit). Lorsque vous ouvrez un fichier HTML (extension .html ) dans un \u00e9diteur de texte, vous pouvez voir et modifier le code ; quand vous ouvrez ce m\u00eame fichier dans votre navigateur, vous voyez le r\u00e9sultat visuel.","title":"Les outils"},{"location":"#ressources","text":"Vous pourrez retrouver des ressources compl\u00e9mentaires dans le dernier chapitre.","title":"Ressources"},{"location":"Ch01_rappel/","text":"Rappel D\u00e9butons par faire un rappel sur ce que nous avions vu en cours jusqu'\u00e0 pr\u00e9sent. Le r\u00f4le de HTML et de CSS HTML ( HyperText Markup Language ) : fait son apparition d\u00e8s 1991 lors du lancement du Web. Son r\u00f4le est de g\u00e9rer et organiser le contenu . C'est donc en HTML que vous \u00e9crirez ce qui doit \u00eatre affich\u00e9 sur la page : du texte, des liens, des images\u2026 Vous direz par exemple : \"Ceci est mon titre, ceci est mon menu, voici le texte principal de la page, voici une image \u00e0 afficher, etc.\". CSS ( Cascading Style Sheets , aussi appel\u00e9es Feuilles de style) : le r\u00f4le du CSS est de g\u00e9rer l'apparence de la page web (agencement, positionnement, d\u00e9coration, couleurs, taille du texte\u2026). Ce langage est venu compl\u00e9ter le HTML en 1996. HTML, les bases Le r\u00f4le de ce langage est de g\u00e9rer et organiser le contenu . Il s'\u00e9crit dans des documents avec l'extension .html . Grammaire HTML Un \u00e9l\u00e9ment HTML s'\u00e9crit sous la forme d'une balise. La syntaxe g\u00e9n\u00e9rique est la suivante : < balise attribut = \"valeur\" > Contenu de l'\u00e9l\u00e9ment </ balise > Les \u00e9l\u00e9ments HTML n'ayant' pas de contenu peuvent \u00eatre \u00e9crits sous la forme d'une balise orpheline : < balise /> Un exemple concret de balise paire, un paragraphe : < p > Ceci est un paragraphe </ p > Un exemple concret de balise orpheline, un retour \u00e0 la ligne : < br /> Un exemple concret de balise orpheline avec attribut, une image : < img src = \"adresseImage.jpg\" alt = \"Description de l'image\" /> Les r\u00e8gles qui r\u00e9gissent le langage HTML : Tous les \u00e9l\u00e9ments doivent \u00eatre clos Les \u00e9l\u00e9ments HTML peuvent s\u2019imbriquer Les \u00e9l\u00e9ments HTML ne doivent pas se chevaucher Les balises doivent \u00eatre ferm\u00e9es dans le sens inverse de leur ouverture. Vocabulaire HTML Nous avons d\u00e9j\u00e0 vu les \u00e9l\u00e9ments HTML suivants : <p>...</p> : paragraphe <h1>...</h1> : titre de niveau 1 <h2>...</h2> : titre de niveau 2 ... <h6>...</h6> : titre de niveau 6 <br/> : saut de ligne <img src=\"\" alt=\"\"/> : image <a href=\"\" target=\"\">...</a> : lien hypertexte <ol><li>...</li></ol> : liste ordonn\u00e9e (num\u00e9rot\u00e9e) <ul><li>...</li></ul> : liste non ordonn\u00e9e (\u00e0 puces) En voici quelques autres : <strong>...</strong> : texte tr\u00e8s important <em>...</em> : texte important (mise en emphase) Ces \u00e9l\u00e9ments vous permettent d'\u00e9crire et de hi\u00e9rarchiser votre contenu textuel ainsi que les images. Nous verrons plus loin d'autre \u00e9l\u00e9ments HTML qui nous permettront de mieux structurer (mettre en page) notre site web. Retrouvez l'ensemble des \u00e9l\u00e9ments HTML disponibles sur le site des d\u00e9veloppeurs Mozilla . Bien d\u00e9marrer La page d'accueil d'un site se nomme index.html . Prenez l'habitude de bien structurer vos fichiers. Je vous encourage, pour chaque site que vous cr\u00e9ez, de cr\u00e9er un nouveau r\u00e9pertoire (dossier) portant le nom du site. Dans ce r\u00e9pertoire, placer le fichier index.html , un r\u00e9pertoire pages pour les autres pages du site (fichiers .html ) , un r\u00e9pertoire img pour les images et un r\u00e9pertoire css qui contiendra vos feuilles de style (fichiers .css ). Pour que votre page web soit valide, elle doit comporter un certain nombre d'\u00e9l\u00e9ments obligatoires (cf. Structure globale d'un document HTML5 ). On doit d'abord d\u00e9finir le doctype (type de document) et place l'\u00e9l\u00e9ment racine <html> . Cet \u00e9l\u00e9ment contient les \u00e9l\u00e9ments <head> et <body> . L'\u00e9l\u00e9ment <head> (en-t\u00eate html) contient au minimum les \u00e9l\u00e9ments <title> - qui permet de d\u00e9finir le titre de la page affich\u00e9 dans les moteur de recherche et l'onglet du navigateur - et <meta> avec son attribut charset - qui permet de d\u00e9finir l'encode des caract\u00e8res. De mani\u00e8re g\u00e9n\u00e9rale, optez pour UTF-8 . Structure HTML minimale : <!doctype html> < html > < head > < meta charset = \"utf-8\" > < title > Titre de la page </ title > </ head > < body > <!-- Le contenu de votre site --> </ body > </ html > CSS, les bases Le r\u00f4le de ce langage est de g\u00e9rer l'apparence de la page web (agencement, positionnement, d\u00e9coration, couleurs, taille du texte\u2026). Il s'\u00e9crit dans des documents avec l'extension .css . Un fichier CSS est \u00e9galement appel\u00e9 une feuille de styles . Grammaire CSS La syntaxe g\u00e9n\u00e9rique d'une d\u00e9claration CSS est la suivante : selecteur { propri\u00e9te : valeur ; } Un exemple concret de d\u00e9claration CSS. Tous les paragraphes en rouge : p { color : red ; } Il est possible de d\u00e9finir plusieurs propri\u00e9t\u00e9s pour un m\u00eame s\u00e9lecteur. Exemple, tous les paragraphes en rouge, en taille 14pt et en gras : p { color : red ; font-size : 14 pt ; font-weight : bold ; } Nous allons bien s\u00fbr pouvoir faire plusieurs d\u00e9clarations au sein d'une m\u00eame feuille de style (d'un m\u00eame fichier .CSS ). Sch\u00e9matiquement, une feuille de style CSS ressemble donc \u00e0 cela : selecteur1 { propri\u00e9t\u00e91 : valeur1 ; propri\u00e9t\u00e92 : valeur2 ; } selecteur2 { propri\u00e9t\u00e91 : valeur1 ; propri\u00e9t\u00e92 : valeur2 ; propri\u00e9t\u00e93 : valeur3 ; } selecteur3 { propri\u00e9t\u00e91 : valeur1 ; } Vocabulaire CSS Il existe des centaines de propri\u00e9t\u00e9s css que l'on peut appliquer \u00e0 des \u00e9l\u00e9ments html. En cours, nous avons d\u00e9j\u00e0 \u00e9voqu\u00e9 les suivantes : color : couleur du texte font-size : taille du texte text-align : alignement du texte font-family : police du texte background-color : couleur d'arri\u00e8re-plan Il est impossible de passer en revue toutes les propri\u00e9t\u00e9s CSS. De plus, chacune d'elles acceptent des types de valeurs particuliers. Les principales propri\u00e9t\u00e9s se trouvent dans les diapos du cours . Pour le reste, je vous encourage \u00e0 chercher dans la documentation en ligne ( ici ou l\u00e0 par exemple) ou passez par les moteurs de recherche. Bien d\u00e9marrer Pour que les styles que d\u00e9finissez \u00e0 l'int\u00e9rieur d'une feuille de style (fichier .css ), s'applique \u00e0 une page web (fichier .HTML ), il faut lier ces deux fichiers. Cette liaison s'op\u00e8re dans l'en-t\u00eate du fichier HTML (dans l'\u00e9l\u00e9ment head ). < link rel = \"stylesheet\" href = \"adresseFeuilleDeStyles.css\" /> Attention L'adresse relative entre votre fichier HTML et CSS doit correspondre \u00e0 votre hi\u00e9rarchie de fichiers. Dans mon cas, en reprenant la structure de site pr\u00e9sent\u00e9e plus haut, pour appeler le fichier style.css depuis le fichier index.html , je dois entrer dans le dossier CSS puis appeler le fichier style.css . < link rel = \"stylesheet\" href = \"css/styles.css\" /> Structure HTML minimale avec appel d'une feuille de style : <!doctype html> < html > < head > < meta charset = \"utf-8\" > < title > Titre de la page </ title > < link rel = \"stylesheet\" href = \"css/styles.css\" /> </ head > < body > <!-- Le contenu de votre site --> </ body > </ html > CSS en pratique Utilisation des web fonts Je vous rappelle l'int\u00e9r\u00eat d'utiliser des web fonts lorsque vous d\u00e9finissez des familles de polices \u00e0 utiliser dans votre site : externaliser la police (gain de place sur votre site) ; tout utilisateur verra cette police m\u00eame si elle n'est pas install\u00e9e sur son ordinateur. Attention toutefois au temps de chargement qui peut vite augmenter si vous charger trop de police de caract\u00e8re. Que se soit pour des questions de chargement ou d'esth\u00e9tisme, ne d\u00e9passez pas 3 polices diff\u00e9rentes sur un m\u00eame site. N'h\u00e9sitez pas, cependant \u00e0 jouer sur la graisse de la police (propri\u00e9t\u00e9 css font-weight ) et/ou sur l'espacement des caract\u00e8res (proprit\u00e9 css letter-spacing ). Nous avons utilis\u00e9 en cours le service Google Fonts . Pour int\u00e9grer la police de votre choix \u00e0 votre feuille de styles : s\u00e9lectionner une police + dans le \"panier\" (Family selected), choisissez la m\u00e9thode @import copiez la ligne commen\u00e7ant par @import url( collez-la au tout d\u00e9but de votre feuille de style CSS copiez la propri\u00e9t\u00e9 css de la partie Specify in CSS commen\u00e7ant par font-family: copiez-la, dans votre feuille de style, \u00e0 l'endroit ou vous souhaitez l'utiliser Je vous renvoie \u00e9galement \u00e0 la partie sur la mise en forme du texte dans ma pr\u00e9sentation. Les couleurs en CSS Plusieurs propri\u00e9t\u00e9s CSS attendent des valeurs de couleur. C'est notamment le cas des propri\u00e9t\u00e9s color (couleur du texte) et backgroung-color (couleur d'arri\u00e8re-plan). En CSS, il est possible de sp\u00e9cifier les couleurs de 3 mani\u00e8res diff\u00e9rentes : utiliser les noms des couleurs telles qu'elles sont d\u00e9finies par le W3C sp\u00e9cifier les composantes rouge, verte et bleu de la couleur avec rgb() sp\u00e9cifier les valeurs RVB en hexad\u00e9cimal pr\u00e9c\u00e9d\u00e9 de # Petite parenth\u00e8se sur la notation hexad\u00e9cimale Celle-ci est tr\u00e8s r\u00e9pandue sur le Web, notamment en CSS car elle a le m\u00e9rite d'\u00eatre plus courte \u00e0 \u00e9crire que la notion d\u00e9cimale RGB et elle permet de sp\u00e9cifier des couleurs qui n'ont pas de noms r\u00e9serv\u00e9s. Rappelez-vous, nous avions vu qu'une couleur num\u00e9rique comprenait 3 composantes (rouge, vert et bleu) chacune cod\u00e9e de 0 \u00e0 255 unit\u00e9s de valeur. En RGB, le rouge pur se note : rgb(255,0,0) \u2192 rouge : 255 ; vert : 0 ; bleu : 0 En hexad\u00e9cimal, une couleur est repr\u00e9sent\u00e9e par 3 paires de caract\u00e8res qui repr\u00e9sentent respectivement l'intensit\u00e9 de rouge, vert et bleu qui sont toujours cod\u00e9es sur 255 valeurs. Sachant qu'en hexad\u00e9cimal, 0 se note 00 et que 255 se note FF, nous codons donc les couleurs de #000000 \u00e0 #FFFFFF . Les 2 premiers caract\u00e8res repr\u00e9sente la composante rouge, les 2 suivants, la composante verte et les 2 derniers la composante bleue. En hexa, le rouge pur se note : #FF0000 \u2192 rouge : FF = 255 ; vert : 00 = 0 ; bleu : 00 = 0 \u2192 Pour en savoir plus sur le syst\u00e8me hexad\u00e9cimal, je vous renvoie sur cette page Wikipedia \u2192 Retrouvez d'autres informations sur les couleurs Web sur cette page Wikipedia et sur https://htmlcolorcodes.com/fr/ Ainsi, si je souhaite que tous mes titres (\u00e9l\u00e9ment <h1> ) soient de couleur sarcelle ( teal en anglais) je peux l'\u00e9crire de 3 mani\u00e8res diff\u00e9rentes mais \u00e9quivalentes : h1 { color : teal ; } ou h1 { color : rgb ( 0 , 128 , 128 ); } ou h1 { color : #008080 ; } Compl\u00e9ments sur les couleurs en css : https://developer.mozilla.org/fr/docs/Web/CSS/Type_color Je vous renvoie \u00e9galement \u00e0 la partie sur la couleur dans ma pr\u00e9sentation. Les classes En CSS, il existe diff\u00e9rents types de s\u00e9lecteurs. Jusqu'\u00e0 pr\u00e9sent, nous avons utlis\u00e9 des s\u00e9lecteurs de type . Ce s\u00e9lecteur permet de cibler les \u00e9l\u00e9ments qui correspondent au nom indiqu\u00e9. Par exemple, en CSS : p{ ... } permet de cibler tous les \u00e9l\u00e9ments de type paragraphe de notre page HTML ( <p> ). Comment puis-je alors ne cibler que certains de ces paragraphes ? Je vais pouvoir utiliser les classes . Il s'agit d'ajouter \u00e0 certains \u00e9l\u00e9ment HTML un attribut class auquel on donne une valeur (le nom de la classe). Puis d'utiliser en CSS un s\u00e9lecteur de classe . Ce s\u00e9lecteur permet de cibler les \u00e9l\u00e9ments en fonction de la valeur de leur attribut class . En HTML : < p class = \"nomDeLaClasse\" > ... </ p > En CSS : . nomDeLaClasse { } Contentons-nous pour le moment de ces deux types de s\u00e9lecteurs. Ils seront suffisants dans la majorit\u00e9 des cas que vous rencontrerez. Exemples Retrouvez ici , une structure de site vierge que vous pouvez r\u00e9utiliser. Retrouvez ici , un site plus complet avec plusieurs pages, du contenu et une feuille de style.","title":"Ch.1 - Rappel"},{"location":"Ch01_rappel/#rappel","text":"D\u00e9butons par faire un rappel sur ce que nous avions vu en cours jusqu'\u00e0 pr\u00e9sent.","title":"Rappel"},{"location":"Ch01_rappel/#le-role-de-html-et-de-css","text":"HTML ( HyperText Markup Language ) : fait son apparition d\u00e8s 1991 lors du lancement du Web. Son r\u00f4le est de g\u00e9rer et organiser le contenu . C'est donc en HTML que vous \u00e9crirez ce qui doit \u00eatre affich\u00e9 sur la page : du texte, des liens, des images\u2026 Vous direz par exemple : \"Ceci est mon titre, ceci est mon menu, voici le texte principal de la page, voici une image \u00e0 afficher, etc.\". CSS ( Cascading Style Sheets , aussi appel\u00e9es Feuilles de style) : le r\u00f4le du CSS est de g\u00e9rer l'apparence de la page web (agencement, positionnement, d\u00e9coration, couleurs, taille du texte\u2026). Ce langage est venu compl\u00e9ter le HTML en 1996.","title":"Le r\u00f4le de HTML et de CSS"},{"location":"Ch01_rappel/#html-les-bases","text":"Le r\u00f4le de ce langage est de g\u00e9rer et organiser le contenu . Il s'\u00e9crit dans des documents avec l'extension .html .","title":"HTML, les bases"},{"location":"Ch01_rappel/#grammaire-html","text":"Un \u00e9l\u00e9ment HTML s'\u00e9crit sous la forme d'une balise. La syntaxe g\u00e9n\u00e9rique est la suivante : < balise attribut = \"valeur\" > Contenu de l'\u00e9l\u00e9ment </ balise > Les \u00e9l\u00e9ments HTML n'ayant' pas de contenu peuvent \u00eatre \u00e9crits sous la forme d'une balise orpheline : < balise /> Un exemple concret de balise paire, un paragraphe : < p > Ceci est un paragraphe </ p > Un exemple concret de balise orpheline, un retour \u00e0 la ligne : < br /> Un exemple concret de balise orpheline avec attribut, une image : < img src = \"adresseImage.jpg\" alt = \"Description de l'image\" /> Les r\u00e8gles qui r\u00e9gissent le langage HTML : Tous les \u00e9l\u00e9ments doivent \u00eatre clos Les \u00e9l\u00e9ments HTML peuvent s\u2019imbriquer Les \u00e9l\u00e9ments HTML ne doivent pas se chevaucher Les balises doivent \u00eatre ferm\u00e9es dans le sens inverse de leur ouverture.","title":"Grammaire HTML"},{"location":"Ch01_rappel/#vocabulaire-html","text":"Nous avons d\u00e9j\u00e0 vu les \u00e9l\u00e9ments HTML suivants : <p>...</p> : paragraphe <h1>...</h1> : titre de niveau 1 <h2>...</h2> : titre de niveau 2 ... <h6>...</h6> : titre de niveau 6 <br/> : saut de ligne <img src=\"\" alt=\"\"/> : image <a href=\"\" target=\"\">...</a> : lien hypertexte <ol><li>...</li></ol> : liste ordonn\u00e9e (num\u00e9rot\u00e9e) <ul><li>...</li></ul> : liste non ordonn\u00e9e (\u00e0 puces) En voici quelques autres : <strong>...</strong> : texte tr\u00e8s important <em>...</em> : texte important (mise en emphase) Ces \u00e9l\u00e9ments vous permettent d'\u00e9crire et de hi\u00e9rarchiser votre contenu textuel ainsi que les images. Nous verrons plus loin d'autre \u00e9l\u00e9ments HTML qui nous permettront de mieux structurer (mettre en page) notre site web. Retrouvez l'ensemble des \u00e9l\u00e9ments HTML disponibles sur le site des d\u00e9veloppeurs Mozilla .","title":"Vocabulaire HTML"},{"location":"Ch01_rappel/#bien-demarrer","text":"La page d'accueil d'un site se nomme index.html . Prenez l'habitude de bien structurer vos fichiers. Je vous encourage, pour chaque site que vous cr\u00e9ez, de cr\u00e9er un nouveau r\u00e9pertoire (dossier) portant le nom du site. Dans ce r\u00e9pertoire, placer le fichier index.html , un r\u00e9pertoire pages pour les autres pages du site (fichiers .html ) , un r\u00e9pertoire img pour les images et un r\u00e9pertoire css qui contiendra vos feuilles de style (fichiers .css ). Pour que votre page web soit valide, elle doit comporter un certain nombre d'\u00e9l\u00e9ments obligatoires (cf. Structure globale d'un document HTML5 ). On doit d'abord d\u00e9finir le doctype (type de document) et place l'\u00e9l\u00e9ment racine <html> . Cet \u00e9l\u00e9ment contient les \u00e9l\u00e9ments <head> et <body> . L'\u00e9l\u00e9ment <head> (en-t\u00eate html) contient au minimum les \u00e9l\u00e9ments <title> - qui permet de d\u00e9finir le titre de la page affich\u00e9 dans les moteur de recherche et l'onglet du navigateur - et <meta> avec son attribut charset - qui permet de d\u00e9finir l'encode des caract\u00e8res. De mani\u00e8re g\u00e9n\u00e9rale, optez pour UTF-8 . Structure HTML minimale : <!doctype html> < html > < head > < meta charset = \"utf-8\" > < title > Titre de la page </ title > </ head > < body > <!-- Le contenu de votre site --> </ body > </ html >","title":"Bien d\u00e9marrer"},{"location":"Ch01_rappel/#css-les-bases","text":"Le r\u00f4le de ce langage est de g\u00e9rer l'apparence de la page web (agencement, positionnement, d\u00e9coration, couleurs, taille du texte\u2026). Il s'\u00e9crit dans des documents avec l'extension .css . Un fichier CSS est \u00e9galement appel\u00e9 une feuille de styles .","title":"CSS, les bases"},{"location":"Ch01_rappel/#grammaire-css","text":"La syntaxe g\u00e9n\u00e9rique d'une d\u00e9claration CSS est la suivante : selecteur { propri\u00e9te : valeur ; } Un exemple concret de d\u00e9claration CSS. Tous les paragraphes en rouge : p { color : red ; } Il est possible de d\u00e9finir plusieurs propri\u00e9t\u00e9s pour un m\u00eame s\u00e9lecteur. Exemple, tous les paragraphes en rouge, en taille 14pt et en gras : p { color : red ; font-size : 14 pt ; font-weight : bold ; } Nous allons bien s\u00fbr pouvoir faire plusieurs d\u00e9clarations au sein d'une m\u00eame feuille de style (d'un m\u00eame fichier .CSS ). Sch\u00e9matiquement, une feuille de style CSS ressemble donc \u00e0 cela : selecteur1 { propri\u00e9t\u00e91 : valeur1 ; propri\u00e9t\u00e92 : valeur2 ; } selecteur2 { propri\u00e9t\u00e91 : valeur1 ; propri\u00e9t\u00e92 : valeur2 ; propri\u00e9t\u00e93 : valeur3 ; } selecteur3 { propri\u00e9t\u00e91 : valeur1 ; }","title":"Grammaire CSS"},{"location":"Ch01_rappel/#vocabulaire-css","text":"Il existe des centaines de propri\u00e9t\u00e9s css que l'on peut appliquer \u00e0 des \u00e9l\u00e9ments html. En cours, nous avons d\u00e9j\u00e0 \u00e9voqu\u00e9 les suivantes : color : couleur du texte font-size : taille du texte text-align : alignement du texte font-family : police du texte background-color : couleur d'arri\u00e8re-plan Il est impossible de passer en revue toutes les propri\u00e9t\u00e9s CSS. De plus, chacune d'elles acceptent des types de valeurs particuliers. Les principales propri\u00e9t\u00e9s se trouvent dans les diapos du cours . Pour le reste, je vous encourage \u00e0 chercher dans la documentation en ligne ( ici ou l\u00e0 par exemple) ou passez par les moteurs de recherche.","title":"Vocabulaire CSS"},{"location":"Ch01_rappel/#bien-demarrer_1","text":"Pour que les styles que d\u00e9finissez \u00e0 l'int\u00e9rieur d'une feuille de style (fichier .css ), s'applique \u00e0 une page web (fichier .HTML ), il faut lier ces deux fichiers. Cette liaison s'op\u00e8re dans l'en-t\u00eate du fichier HTML (dans l'\u00e9l\u00e9ment head ). < link rel = \"stylesheet\" href = \"adresseFeuilleDeStyles.css\" /> Attention L'adresse relative entre votre fichier HTML et CSS doit correspondre \u00e0 votre hi\u00e9rarchie de fichiers. Dans mon cas, en reprenant la structure de site pr\u00e9sent\u00e9e plus haut, pour appeler le fichier style.css depuis le fichier index.html , je dois entrer dans le dossier CSS puis appeler le fichier style.css . < link rel = \"stylesheet\" href = \"css/styles.css\" /> Structure HTML minimale avec appel d'une feuille de style : <!doctype html> < html > < head > < meta charset = \"utf-8\" > < title > Titre de la page </ title > < link rel = \"stylesheet\" href = \"css/styles.css\" /> </ head > < body > <!-- Le contenu de votre site --> </ body > </ html >","title":"Bien d\u00e9marrer"},{"location":"Ch01_rappel/#css-en-pratique","text":"","title":"CSS en pratique"},{"location":"Ch01_rappel/#utilisation-des-web-fonts","text":"Je vous rappelle l'int\u00e9r\u00eat d'utiliser des web fonts lorsque vous d\u00e9finissez des familles de polices \u00e0 utiliser dans votre site : externaliser la police (gain de place sur votre site) ; tout utilisateur verra cette police m\u00eame si elle n'est pas install\u00e9e sur son ordinateur. Attention toutefois au temps de chargement qui peut vite augmenter si vous charger trop de police de caract\u00e8re. Que se soit pour des questions de chargement ou d'esth\u00e9tisme, ne d\u00e9passez pas 3 polices diff\u00e9rentes sur un m\u00eame site. N'h\u00e9sitez pas, cependant \u00e0 jouer sur la graisse de la police (propri\u00e9t\u00e9 css font-weight ) et/ou sur l'espacement des caract\u00e8res (proprit\u00e9 css letter-spacing ). Nous avons utilis\u00e9 en cours le service Google Fonts . Pour int\u00e9grer la police de votre choix \u00e0 votre feuille de styles : s\u00e9lectionner une police + dans le \"panier\" (Family selected), choisissez la m\u00e9thode @import copiez la ligne commen\u00e7ant par @import url( collez-la au tout d\u00e9but de votre feuille de style CSS copiez la propri\u00e9t\u00e9 css de la partie Specify in CSS commen\u00e7ant par font-family: copiez-la, dans votre feuille de style, \u00e0 l'endroit ou vous souhaitez l'utiliser Je vous renvoie \u00e9galement \u00e0 la partie sur la mise en forme du texte dans ma pr\u00e9sentation.","title":"Utilisation des web fonts"},{"location":"Ch01_rappel/#les-couleurs-en-css","text":"Plusieurs propri\u00e9t\u00e9s CSS attendent des valeurs de couleur. C'est notamment le cas des propri\u00e9t\u00e9s color (couleur du texte) et backgroung-color (couleur d'arri\u00e8re-plan). En CSS, il est possible de sp\u00e9cifier les couleurs de 3 mani\u00e8res diff\u00e9rentes : utiliser les noms des couleurs telles qu'elles sont d\u00e9finies par le W3C sp\u00e9cifier les composantes rouge, verte et bleu de la couleur avec rgb() sp\u00e9cifier les valeurs RVB en hexad\u00e9cimal pr\u00e9c\u00e9d\u00e9 de # Petite parenth\u00e8se sur la notation hexad\u00e9cimale Celle-ci est tr\u00e8s r\u00e9pandue sur le Web, notamment en CSS car elle a le m\u00e9rite d'\u00eatre plus courte \u00e0 \u00e9crire que la notion d\u00e9cimale RGB et elle permet de sp\u00e9cifier des couleurs qui n'ont pas de noms r\u00e9serv\u00e9s. Rappelez-vous, nous avions vu qu'une couleur num\u00e9rique comprenait 3 composantes (rouge, vert et bleu) chacune cod\u00e9e de 0 \u00e0 255 unit\u00e9s de valeur. En RGB, le rouge pur se note : rgb(255,0,0) \u2192 rouge : 255 ; vert : 0 ; bleu : 0 En hexad\u00e9cimal, une couleur est repr\u00e9sent\u00e9e par 3 paires de caract\u00e8res qui repr\u00e9sentent respectivement l'intensit\u00e9 de rouge, vert et bleu qui sont toujours cod\u00e9es sur 255 valeurs. Sachant qu'en hexad\u00e9cimal, 0 se note 00 et que 255 se note FF, nous codons donc les couleurs de #000000 \u00e0 #FFFFFF . Les 2 premiers caract\u00e8res repr\u00e9sente la composante rouge, les 2 suivants, la composante verte et les 2 derniers la composante bleue. En hexa, le rouge pur se note : #FF0000 \u2192 rouge : FF = 255 ; vert : 00 = 0 ; bleu : 00 = 0 \u2192 Pour en savoir plus sur le syst\u00e8me hexad\u00e9cimal, je vous renvoie sur cette page Wikipedia \u2192 Retrouvez d'autres informations sur les couleurs Web sur cette page Wikipedia et sur https://htmlcolorcodes.com/fr/ Ainsi, si je souhaite que tous mes titres (\u00e9l\u00e9ment <h1> ) soient de couleur sarcelle ( teal en anglais) je peux l'\u00e9crire de 3 mani\u00e8res diff\u00e9rentes mais \u00e9quivalentes : h1 { color : teal ; } ou h1 { color : rgb ( 0 , 128 , 128 ); } ou h1 { color : #008080 ; } Compl\u00e9ments sur les couleurs en css : https://developer.mozilla.org/fr/docs/Web/CSS/Type_color Je vous renvoie \u00e9galement \u00e0 la partie sur la couleur dans ma pr\u00e9sentation.","title":"Les couleurs en CSS"},{"location":"Ch01_rappel/#les-classes","text":"En CSS, il existe diff\u00e9rents types de s\u00e9lecteurs. Jusqu'\u00e0 pr\u00e9sent, nous avons utlis\u00e9 des s\u00e9lecteurs de type . Ce s\u00e9lecteur permet de cibler les \u00e9l\u00e9ments qui correspondent au nom indiqu\u00e9. Par exemple, en CSS : p{ ... } permet de cibler tous les \u00e9l\u00e9ments de type paragraphe de notre page HTML ( <p> ). Comment puis-je alors ne cibler que certains de ces paragraphes ? Je vais pouvoir utiliser les classes . Il s'agit d'ajouter \u00e0 certains \u00e9l\u00e9ment HTML un attribut class auquel on donne une valeur (le nom de la classe). Puis d'utiliser en CSS un s\u00e9lecteur de classe . Ce s\u00e9lecteur permet de cibler les \u00e9l\u00e9ments en fonction de la valeur de leur attribut class . En HTML : < p class = \"nomDeLaClasse\" > ... </ p > En CSS : . nomDeLaClasse { } Contentons-nous pour le moment de ces deux types de s\u00e9lecteurs. Ils seront suffisants dans la majorit\u00e9 des cas que vous rencontrerez.","title":"Les classes"},{"location":"Ch01_rappel/#exemples","text":"Retrouvez ici , une structure de site vierge que vous pouvez r\u00e9utiliser. Retrouvez ici , un site plus complet avec plusieurs pages, du contenu et une feuille de style.","title":"Exemples"},{"location":"Ch02_structure/","text":"Structurer notre page HTML Cette partie est largement inspir\u00e9e d' Openclassroom - Apprenez \u00e0 cr\u00e9er votre site web avec HTML5 et CSS3 Revenons un peu \u00e0 notre page HTML. Nous avons, jusqu'\u00e0 pr\u00e9sent, ajouter des \u00e9l\u00e9ments de contenus (titres, paragraphes, images, listes, liens, etc.) \u00e0 la suite les uns des autres, sans trop nous occuper de la mise en page. En g\u00e9n\u00e9ral, une page web est constitu\u00e9e d'un en-t\u00eate (tout en haut), de menus de navigation (en haut ou sur les c\u00f4t\u00e9s), de diff\u00e9rentes sections au centre et d'un pied de page (tout en bas). Dans ce chapitre, nous allons nous int\u00e9resser aux balises HTML d\u00e9di\u00e9es \u00e0 la structuration du site. Ces balises ont \u00e9t\u00e9 introduites par HTML5 et vont nous permettre de dire : \"Ceci est mon en-t\u00eate\", \"Ceci est mon menu de navigation\", \"ceci est mon pied de page\", etc. Il nous faut dans un premier temps, avant g\u00e9rer le positionnement des diff\u00e9rentes parties en CSS, structurer notre document HTML. Je vous renvoie \u00e0 la partie Conteneurs s\u00e9mantiques dans ma pr\u00e9sentation. Il existe 6 \u00e9l\u00e9ments (balises) HTML permettant de structurer un site web : <header> : en-t\u00eate ; <footer> : pied de page ; <nav> : principaux liens de navigation ; <section> : section de page ; <aside> : informations compl\u00e9mentaires ; <article> : article ind\u00e9pendant. L'en-t\u00eate La plupart des sites web poss\u00e8dent en g\u00e9n\u00e9ral un en-t\u00eate ( header en anglais). On y trouve le plus souvent un logo, une banni\u00e8re, le slogan de votre site\u2026 Vous devrez placer ces informations \u00e0 l'int\u00e9rieur de la balise <header> : < header > <!-- Placez ici le contenu de l'en-t\u00eate de votre page --> </ header > La figure suivante, par exemple, repr\u00e9sente le site du W3C (qui se charge des nouvelles versions de HTML et CSS notamment). La partie encadr\u00e9e en rouge correspondrait \u00e0 l'en-t\u00eate : L'en-t\u00eate peut contenir tout ce que vous voulez : titre, images, liens, textes\u2026 Le pied de page \u00c0 l'inverse de l'en-t\u00eate, le pied de page <footer> se trouve en g\u00e9n\u00e9ral tout en bas du document. On y trouve des informations comme des liens de contact, le nom de l'auteur, les mentions l\u00e9gales, etc. < footer > <!-- Placez ici le contenu du pied de page --> </ footer > La figure suivante vous montre \u00e0 quoi ressemble le pied de page du W3C. Principaux liens de navigation La balise <nav> doit regrouper tous les principaux liens de navigation du site. Vous y placerez par exemple le menu principal de votre site. G\u00e9n\u00e9ralement, le menu est r\u00e9alis\u00e9 sous forme de liste \u00e0 puces \u00e0 l'int\u00e9rieur de la balise <nav> : < nav > < ul > < li >< a href = \"index.html\" > Accueil </ a ></ li > < li >< a href = \"forum.html\" > Forum </ a ></ li > < li >< a href = \"contact.html\" > Contact </ a ></ li > </ ul > </ nav > Nous verront plus loin comment styliser proprement un menu de navigation. Voici le menu sur le site du W3C : <nav> Une section de page La balise <section> sert \u00e0 regrouper des contenus en fonction de leur th\u00e9matique. Elle englobe g\u00e9n\u00e9ralement une portion du contenu au centre de la page. < section > < h1 > Ma section de page </ h1 > < p > Bla bla bla bla </ p > </ section > Sur la page d'accueil du portail Free.fr, on trouve plusieurs blocs qui pourraient \u00eatre consid\u00e9r\u00e9s comme des sections de page (figure suivante). Chaque section peut avoir son titre de niveau 1 ( <h1> ), de m\u00eame que l'en-t\u00eate peut contenir un titre <h1> lui aussi. Chacun de ces blocs \u00e9tant ind\u00e9pendant des autres, il n'est pas illogique de retrouver plusieurs titres <h1> dans le code de la page web. On a ainsi \"Le titre <h1> du <header> \u00bb, \"Le titre <h1> de cette <section> \u00bb, etc. Informations compl\u00e9mentaires La balise <aside> est con\u00e7ue pour contenir des informations compl\u00e9mentaires au document que l'on visualise. Ces informations sont g\u00e9n\u00e9ralement plac\u00e9es sur le c\u00f4t\u00e9 (bien que ce ne soit pas une obligation). < aside > <!-- Placez ici des informations compl\u00e9mentaires --> </ aside > Il peut y avoir plusieurs blocs <aside> dans la page. Sur Wikip\u00e9dia, par exemple, il est courant de voir \u00e0 droite un bloc d'informations compl\u00e9mentaires \u00e0 l'article que l'on visualise. Ainsi, sur la page pr\u00e9sentant la plan\u00e8te Saturne (figure suivante), on trouve dans ce bloc les caract\u00e9ristiques de la plan\u00e8te (dimensions, masse, etc.). Un article ind\u00e9pendant La balise <article> sert \u00e0 englober une portion g\u00e9n\u00e9ralement autonome de la page. C'est une partie de la page qui pourrait ainsi \u00eatre reprise sur un autre site. C'est le cas par exemple des actualit\u00e9s (articles de journaux ou de blogs). < article > < h1 > Mon article </ h1 > < p > Bla bla bla bla </ p > </ article > Par exemple, voici un article sur le Monde : R\u00e9sum\u00e9 Plusieurs balises HTML existe afin de nous aider \u00e0 d\u00e9limiter les diff\u00e9rentes zones qui constituent une page web : - <header> : en-t\u00eate ; - <footer> : pied de page ; - <nav> : principaux liens de navigation ; - <section> : section de page ; - <aside> : informations compl\u00e9mentaires ; - <article> : article ind\u00e9pendant. Ces balises peuvent \u00eatre imbriqu\u00e9es les unes dans les autres. Ainsi, une section peut avoir son propre en-t\u00eate. Attention Ces balises ne s'occupent pas de la mise en page . Elles servent seulement \u00e0 indiquer \u00e0 l'ordinateur la s\u00e9mantique de leur contenu. On pourrait tr\u00e8s bien placer l'en-t\u00eate en bas de la page si on le souhaite. Voici un petit sch\u00e9ma (figure suivante) pour vous aider \u00e0 retenir le r\u00f4le de ces balises : Ne vous y trompez pas : ce sch\u00e9ma propose un_exemple_d'organisation de la page. Rien ne vous emp\u00eache de d\u00e9cider que votre menu de navigation soit \u00e0 droite, ou tout en haut, que vos balises <aside> soient au-dessus, etc. On peut m\u00eame imaginer une seconde balise <header> , plac\u00e9e cette fois \u00e0 l'int\u00e9rieur d'une <section> . Dans ce cas-l\u00e0, elle sera consid\u00e9r\u00e9e comme \u00e9tant l'en-t\u00eate de la section. Enfin, une section ne doit pas forc\u00e9ment contenir un <article> et des <aside> . Utilisez ces balises uniquement si vous en avez besoin. Rien ne vous interdit de cr\u00e9er des sections contenant seulement des paragraphes, par exemple. Une autre organisation possible : Ou encore : Bref, vous l'aurez compris, tout est possible ! \u00c0 vous de structurer correctement votre page avec ces \u00e9l\u00e9ments en fonction du r\u00e9sultat final attendu. Exemple <!DOCTYPE html> < html > < head > < meta charset = \"utf-8\" /> < title > Les carnets de voyages du Dr. Bobo </ title > </ head > < body > < header > < h1 > Dr. Bobo </ h1 > < h2 > Carnets de voyage </ h2 > </ header > < nav > < ul > < li >< a href = \"#\" > Ljubljana </ a ></ li > < li >< a href = \"#\" > Bratislava </ a ></ li > < li >< a href = \"#\" > Budapest </ a ></ li > </ ul > </ nav > < section > < aside > < h1 > \u00c0 propos de l'auteur </ h1 > < p > Je suis le docteur Bobo </ p > </ aside > < article > < h1 > Je suis un grand voyageur </ h1 > < p > Bla bla bla bla (texte de l'article) </ p > </ article > </ section > < footer > < p > Copyright Dr. Bobo - Tous droits r\u00e9serv\u00e9s < br /> < a href = \"#\" > Me contacter ! </ a ></ p > </ footer > </ body > </ html > Ce code peut vous aider \u00e0 comprendre comment les balises doivent \u00eatre agenc\u00e9es. Vous y reconnaissez un en-t\u00eate, un menu de navigation, un pied de page\u2026 et, au centre, une section avec un article et un bloc <aside> donnant des informations sur l'auteur de l'article. Si vous testez le r\u00e9sultat, vous verrez juste du texte noir sur fond blanc. C'est normal, il n'y a pas de CSS ! Par contre, la page est bien structur\u00e9e, ce qui va nous \u00eatre utile pour la suite. Encore une fois ces balises sont seulement l\u00e0 pour expliquer \u00e0 l'ordinateur \"Ceci est l'en-t\u00eate\", \"Ceci est mon pied de page\", etc. Elles n'indiquent pas, contrairement \u00e0 ce qu'on pourrait penser, o\u00f9 doit \u00eatre plac\u00e9 le contenu. C'est le r\u00f4le du CSS. \u00c0 vous de jouer Reprenez le site d\u00e9buter en cours ; ou t\u00e9l\u00e9chargez cette base . Structurez-le avec les balises structurantes HTML ( <header> , <section> , <nav> , etc.).","title":"Ch.2 - Structurer votre site"},{"location":"Ch02_structure/#structurer-notre-page-html","text":"Cette partie est largement inspir\u00e9e d' Openclassroom - Apprenez \u00e0 cr\u00e9er votre site web avec HTML5 et CSS3 Revenons un peu \u00e0 notre page HTML. Nous avons, jusqu'\u00e0 pr\u00e9sent, ajouter des \u00e9l\u00e9ments de contenus (titres, paragraphes, images, listes, liens, etc.) \u00e0 la suite les uns des autres, sans trop nous occuper de la mise en page. En g\u00e9n\u00e9ral, une page web est constitu\u00e9e d'un en-t\u00eate (tout en haut), de menus de navigation (en haut ou sur les c\u00f4t\u00e9s), de diff\u00e9rentes sections au centre et d'un pied de page (tout en bas). Dans ce chapitre, nous allons nous int\u00e9resser aux balises HTML d\u00e9di\u00e9es \u00e0 la structuration du site. Ces balises ont \u00e9t\u00e9 introduites par HTML5 et vont nous permettre de dire : \"Ceci est mon en-t\u00eate\", \"Ceci est mon menu de navigation\", \"ceci est mon pied de page\", etc. Il nous faut dans un premier temps, avant g\u00e9rer le positionnement des diff\u00e9rentes parties en CSS, structurer notre document HTML. Je vous renvoie \u00e0 la partie Conteneurs s\u00e9mantiques dans ma pr\u00e9sentation. Il existe 6 \u00e9l\u00e9ments (balises) HTML permettant de structurer un site web : <header> : en-t\u00eate ; <footer> : pied de page ; <nav> : principaux liens de navigation ; <section> : section de page ; <aside> : informations compl\u00e9mentaires ; <article> : article ind\u00e9pendant.","title":"Structurer notre page HTML"},{"location":"Ch02_structure/#len-tete","text":"La plupart des sites web poss\u00e8dent en g\u00e9n\u00e9ral un en-t\u00eate ( header en anglais). On y trouve le plus souvent un logo, une banni\u00e8re, le slogan de votre site\u2026 Vous devrez placer ces informations \u00e0 l'int\u00e9rieur de la balise <header> : < header > <!-- Placez ici le contenu de l'en-t\u00eate de votre page --> </ header > La figure suivante, par exemple, repr\u00e9sente le site du W3C (qui se charge des nouvelles versions de HTML et CSS notamment). La partie encadr\u00e9e en rouge correspondrait \u00e0 l'en-t\u00eate : L'en-t\u00eate peut contenir tout ce que vous voulez : titre, images, liens, textes\u2026","title":"L'en-t\u00eate"},{"location":"Ch02_structure/#le-pied-de-page","text":"\u00c0 l'inverse de l'en-t\u00eate, le pied de page <footer> se trouve en g\u00e9n\u00e9ral tout en bas du document. On y trouve des informations comme des liens de contact, le nom de l'auteur, les mentions l\u00e9gales, etc. < footer > <!-- Placez ici le contenu du pied de page --> </ footer > La figure suivante vous montre \u00e0 quoi ressemble le pied de page du W3C.","title":"Le pied de page"},{"location":"Ch02_structure/#principaux-liens-de-navigation","text":"La balise <nav> doit regrouper tous les principaux liens de navigation du site. Vous y placerez par exemple le menu principal de votre site. G\u00e9n\u00e9ralement, le menu est r\u00e9alis\u00e9 sous forme de liste \u00e0 puces \u00e0 l'int\u00e9rieur de la balise <nav> : < nav > < ul > < li >< a href = \"index.html\" > Accueil </ a ></ li > < li >< a href = \"forum.html\" > Forum </ a ></ li > < li >< a href = \"contact.html\" > Contact </ a ></ li > </ ul > </ nav > Nous verront plus loin comment styliser proprement un menu de navigation. Voici le menu sur le site du W3C : <nav>","title":"Principaux liens de navigation"},{"location":"Ch02_structure/#une-section-de-page","text":"La balise <section> sert \u00e0 regrouper des contenus en fonction de leur th\u00e9matique. Elle englobe g\u00e9n\u00e9ralement une portion du contenu au centre de la page. < section > < h1 > Ma section de page </ h1 > < p > Bla bla bla bla </ p > </ section > Sur la page d'accueil du portail Free.fr, on trouve plusieurs blocs qui pourraient \u00eatre consid\u00e9r\u00e9s comme des sections de page (figure suivante). Chaque section peut avoir son titre de niveau 1 ( <h1> ), de m\u00eame que l'en-t\u00eate peut contenir un titre <h1> lui aussi. Chacun de ces blocs \u00e9tant ind\u00e9pendant des autres, il n'est pas illogique de retrouver plusieurs titres <h1> dans le code de la page web. On a ainsi \"Le titre <h1> du <header> \u00bb, \"Le titre <h1> de cette <section> \u00bb, etc.","title":"Une section de page"},{"location":"Ch02_structure/#informations-complementaires","text":"La balise <aside> est con\u00e7ue pour contenir des informations compl\u00e9mentaires au document que l'on visualise. Ces informations sont g\u00e9n\u00e9ralement plac\u00e9es sur le c\u00f4t\u00e9 (bien que ce ne soit pas une obligation). < aside > <!-- Placez ici des informations compl\u00e9mentaires --> </ aside > Il peut y avoir plusieurs blocs <aside> dans la page. Sur Wikip\u00e9dia, par exemple, il est courant de voir \u00e0 droite un bloc d'informations compl\u00e9mentaires \u00e0 l'article que l'on visualise. Ainsi, sur la page pr\u00e9sentant la plan\u00e8te Saturne (figure suivante), on trouve dans ce bloc les caract\u00e9ristiques de la plan\u00e8te (dimensions, masse, etc.).","title":"Informations compl\u00e9mentaires"},{"location":"Ch02_structure/#un-article-independant","text":"La balise <article> sert \u00e0 englober une portion g\u00e9n\u00e9ralement autonome de la page. C'est une partie de la page qui pourrait ainsi \u00eatre reprise sur un autre site. C'est le cas par exemple des actualit\u00e9s (articles de journaux ou de blogs). < article > < h1 > Mon article </ h1 > < p > Bla bla bla bla </ p > </ article > Par exemple, voici un article sur le Monde :","title":"Un article ind\u00e9pendant"},{"location":"Ch02_structure/#resume","text":"Plusieurs balises HTML existe afin de nous aider \u00e0 d\u00e9limiter les diff\u00e9rentes zones qui constituent une page web : - <header> : en-t\u00eate ; - <footer> : pied de page ; - <nav> : principaux liens de navigation ; - <section> : section de page ; - <aside> : informations compl\u00e9mentaires ; - <article> : article ind\u00e9pendant. Ces balises peuvent \u00eatre imbriqu\u00e9es les unes dans les autres. Ainsi, une section peut avoir son propre en-t\u00eate. Attention Ces balises ne s'occupent pas de la mise en page . Elles servent seulement \u00e0 indiquer \u00e0 l'ordinateur la s\u00e9mantique de leur contenu. On pourrait tr\u00e8s bien placer l'en-t\u00eate en bas de la page si on le souhaite. Voici un petit sch\u00e9ma (figure suivante) pour vous aider \u00e0 retenir le r\u00f4le de ces balises : Ne vous y trompez pas : ce sch\u00e9ma propose un_exemple_d'organisation de la page. Rien ne vous emp\u00eache de d\u00e9cider que votre menu de navigation soit \u00e0 droite, ou tout en haut, que vos balises <aside> soient au-dessus, etc. On peut m\u00eame imaginer une seconde balise <header> , plac\u00e9e cette fois \u00e0 l'int\u00e9rieur d'une <section> . Dans ce cas-l\u00e0, elle sera consid\u00e9r\u00e9e comme \u00e9tant l'en-t\u00eate de la section. Enfin, une section ne doit pas forc\u00e9ment contenir un <article> et des <aside> . Utilisez ces balises uniquement si vous en avez besoin. Rien ne vous interdit de cr\u00e9er des sections contenant seulement des paragraphes, par exemple. Une autre organisation possible : Ou encore : Bref, vous l'aurez compris, tout est possible ! \u00c0 vous de structurer correctement votre page avec ces \u00e9l\u00e9ments en fonction du r\u00e9sultat final attendu.","title":"R\u00e9sum\u00e9"},{"location":"Ch02_structure/#exemple","text":"<!DOCTYPE html> < html > < head > < meta charset = \"utf-8\" /> < title > Les carnets de voyages du Dr. Bobo </ title > </ head > < body > < header > < h1 > Dr. Bobo </ h1 > < h2 > Carnets de voyage </ h2 > </ header > < nav > < ul > < li >< a href = \"#\" > Ljubljana </ a ></ li > < li >< a href = \"#\" > Bratislava </ a ></ li > < li >< a href = \"#\" > Budapest </ a ></ li > </ ul > </ nav > < section > < aside > < h1 > \u00c0 propos de l'auteur </ h1 > < p > Je suis le docteur Bobo </ p > </ aside > < article > < h1 > Je suis un grand voyageur </ h1 > < p > Bla bla bla bla (texte de l'article) </ p > </ article > </ section > < footer > < p > Copyright Dr. Bobo - Tous droits r\u00e9serv\u00e9s < br /> < a href = \"#\" > Me contacter ! </ a ></ p > </ footer > </ body > </ html > Ce code peut vous aider \u00e0 comprendre comment les balises doivent \u00eatre agenc\u00e9es. Vous y reconnaissez un en-t\u00eate, un menu de navigation, un pied de page\u2026 et, au centre, une section avec un article et un bloc <aside> donnant des informations sur l'auteur de l'article. Si vous testez le r\u00e9sultat, vous verrez juste du texte noir sur fond blanc. C'est normal, il n'y a pas de CSS ! Par contre, la page est bien structur\u00e9e, ce qui va nous \u00eatre utile pour la suite. Encore une fois ces balises sont seulement l\u00e0 pour expliquer \u00e0 l'ordinateur \"Ceci est l'en-t\u00eate\", \"Ceci est mon pied de page\", etc. Elles n'indiquent pas, contrairement \u00e0 ce qu'on pourrait penser, o\u00f9 doit \u00eatre plac\u00e9 le contenu. C'est le r\u00f4le du CSS.","title":"Exemple"},{"location":"Ch02_structure/#a-vous-de-jouer","text":"Reprenez le site d\u00e9buter en cours ; ou t\u00e9l\u00e9chargez cette base . Structurez-le avec les balises structurantes HTML ( <header> , <section> , <nav> , etc.).","title":"\u00c0 vous de jouer"},{"location":"Ch03_boite/","text":"Le mod\u00e8le de bo\u00eetes Cette partie est quasi-int\u00e9gralement reprise de l'excellent cours de Mathieu Nebra sur Openclassroom : Apprenez \u00e0 cr\u00e9er votre site web avec HTML5 et CSS3 Une page web peut \u00eatre vue comme une succession et un empilement de bo\u00eetes, qu'on appelle \"blocs\". La plupart des \u00e9l\u00e9ments vus au chapitre pr\u00e9c\u00e9dent sont des blocs : <header> , <article> , <nav> , etc. Mais nous connaissions d\u00e9j\u00e0 d'autres blocs : les paragraphes <p> , les titres <h1> , etc. Dans ce chapitre, nous allons apprendre \u00e0 manipuler ces blocs comme de v\u00e9ritables bo\u00eetes. Nous allons leur donner des dimensions, les agencer en jouant sur leurs marges, mais aussi apprendre \u00e0 g\u00e9rer leur contenu\u2026 pour \u00e9viter que le texte ne d\u00e9passe de ces blocs ! Ce sont des notions fondamentales dont nous allons avoir besoin pour mettre en page notre site web. Les balises de type block et inline En HTML, la plupart des balises peuvent se ranger dans l'une ou l'autre de deux cat\u00e9gories : Les balises inline : c'est le cas par exemple des liens <a></a> Les balises block : c'est le cas par exemple des paragraphes <p></p> . Il existe en fait plusieurs autres cat\u00e9gories tr\u00e8s sp\u00e9cifiques, par exemple pour les cellules de tableau (type table-cell ) ou les puces (type list-item ). Nous n'allons pas nous y int\u00e9resser pour le moment car ces balises sont minoritaires. Mais comment reconna\u00eetre une balise inline d'une balise block ? C'est en fait assez facile : block : une balise de type block sur votre page web cr\u00e9e automatiquement un retour \u00e0 la ligne avant et apr\u00e8s. Il suffit d'imaginer tout simplement un bloc. Votre page web sera en fait constitu\u00e9e d'une s\u00e9rie de blocs les uns \u00e0 la suite des autres. Mais vous verrez qu'en plus, il est possible de mettre un bloc \u00e0 l'int\u00e9rieur d'un autre, ce qui va augmenter consid\u00e9rablement nos possibilit\u00e9s pour cr\u00e9er le design de notre site ! inline : une balise de type inline se trouve obligatoirement \u00e0 l'int\u00e9rieur d'une balise block. Une balise inline ne cr\u00e9e pas de retour \u00e0 la ligne, le texte qui se trouve \u00e0 l'int\u00e9rieur s'\u00e9crit donc \u00e0 la suite du texte pr\u00e9c\u00e9dent, sur la m\u00eame ligne (c'est pour cela que l'on parle de balise \"en ligne\"). Depuis HTML5, la cat\u00e9gorisation des diff\u00e9rents \u00e9l\u00e9ments est un peu plus complexe que cela. Cependant, cette petite simplification va vous permettre de bien comprendre la diff\u00e9rence entre le concept de \"bloc\" et le concept de \"en ligne\". Pour bien visualiser le concept, voici un petit sch\u00e9ma : Sur fond bleu, vous avez tout ce qui est de type block. Sur fond jaune, vous avez tout ce qui est de type inline. Comme vous pouvez le voir, les blocs sont les uns en-dessous des autres. On peut aussi les imbriquer les uns \u00e0 l'int\u00e9rieur des autres. La balise inline <a></a> , elle, se trouve \u00e0 l'int\u00e9rieur d'une balise block et le texte vient s'ins\u00e9rer sur la m\u00eame ligne. Si vous voulez avoir la liste compl\u00e8te des balises qui existent et savoir si elles sont de type inline ou block, reportez-vous \u00e0 l' annexe donnant la liste des balises HTML . Les balises universelles Vous les connaissez d\u00e9j\u00e0 car je vous les ai pr\u00e9sent\u00e9es il y a quelques chapitres. Ce sont des balises qui n'ont aucun sens particulier (contrairement \u00e0 <p> qui veut dire \"paragraphe\", <strong> \"important\", etc.). Le principal int\u00e9r\u00eat de ces balises est que l'on peut leur appliquer une class pour le CSS quand aucune autre balise ne convient. Il existe deux balises g\u00e9n\u00e9riques et, comme par hasard, la seule diff\u00e9rence entre les deux est que l'une d'elle est inline et l'autre est block : <span></span> ( inline ) ; <div></div> ( block ). Respectez la s\u00e9mantique ! Les balises universelles sont \"pratiques\" dans certains cas, certes, mais attention \u00e0 ne pas en abuser. Je tiens \u00e0 vous avertir de suite : beaucoup de webmasters mettent des <div> et des <span> trop souvent et oublient que d'autres balises plus adapt\u00e9es existent. Exemple d'un span inutile : <span class=\"important\"> . Je ne devrais jamais voir ceci dans un de vos codes alors qu'il existe la balise <strong> qui sert \u00e0 indiquer l'importance ! Exemple d'un div inutile : <div class=\"titre\"> . Ceci est compl\u00e8tement absurde puisqu'il existe des balises faites sp\u00e9cialement pour les titres ( <h1> , <h2> \u2026). Vous allez me dire qu'au final le r\u00e9sultat (visuel) est le m\u00eame. Je suis tout \u00e0 fait d'accord. Mais les balises g\u00e9n\u00e9riques n'apportent aucun sens \u00e0 la page et ne peuvent pas \u00eatre comprises par l'ordinateur. Utilisez toujours d'autres balises plus adapt\u00e9es quand c'est possible. Google lui-m\u00eame le conseille pour vous aider \u00e0 am\u00e9liorer la position de vos pages au sein de ses r\u00e9sultats de recherche ! Les dimensions Nous allons ici travailler uniquement sur des balises de type block. Pour commencer, int\u00e9ressons-nous \u00e0 la taille des blocs. Contrairement \u00e0 un inline, un bloc a des dimensions pr\u00e9cises. Il poss\u00e8de une largeur et une hauteur. Ce qui fait, \u00f4 surprise, qu'on dispose de deux propri\u00e9t\u00e9s CSS : width : c'est la largeur du bloc. \u00c0 exprimer en pixels (px) ou en pourcentage (%). height : c'est la hauteur du bloc. L\u00e0 encore, on l'exprime soit en pixels (px), soit en pourcentage (%). Pour \u00eatre exact, width et height repr\u00e9sentent la largeur et la hauteur du contenu des blocs. Si le bloc a des marges (on va d\u00e9couvrir ce principe un peu plus loin), celles-ci s'ajouteront \u00e0 la largeur et la hauteur. Par d\u00e9faut, un bloc prend 100% de la largeur disponible. On peut le v\u00e9rifier en appliquant \u00e0 nos blocs des bordures ou une couleur de fond (figure suivante). Maintenant, rajoutons un peu de CSS afin de modifier la largeur des paragraphes. Le CSS suivant dit : \u00ab Je veux que tous mes paragraphes aient une largeur de 50% \u00bb. p { width : 50 % ; } Le r\u00e9sultat est visible \u00e0 la figure suivante : Les pourcentages seront utiles pour cr\u00e9er un design qui s'adapte automatiquement \u00e0 la r\u00e9solution d'\u00e9cran du visiteur. Toutefois, il se peut que vous ayez besoin de cr\u00e9er des blocs ayant une dimension pr\u00e9cise en pixels : p { width : 250 px ; } Minimum et maximum On peut demander \u00e0 ce qu'un bloc ait des dimensions minimales et maximales. C'est tr\u00e8s pratique car cela nous permet de d\u00e9finir des dimensions \u00ab limites \u00bb pour que notre site s'adapte aux diff\u00e9rentes r\u00e9solutions d'\u00e9cran de nos visiteurs : min-width : largeur minimale ; min-height : hauteur minimale ; max-width : largeur maximale ; max-height : hauteur maximale. Par exemple, on peut demander \u00e0 ce que les paragraphes occupent 50% de la largeur et exiger qu'il fassent au moins 400 pixels de large dans tous les cas : p { width : 50 % ; min-width : 400 px ; } Observez le r\u00e9sultat en modifiant la largeur de la fen\u00eatre de votre navigateur. Vous allez voir que, si celle-ci est trop petite, le paragraphe se force \u00e0 occuper au moins 400 pixels de largeur. Les bordures Le CSS vous offre un large choix de bordures pour d\u00e9corer votre page. De nombreuses propri\u00e9t\u00e9s CSS vous permettent de modifier l'apparence de vos bordures : border-width , border-color , border-style , etc. Je vous renvoie \u00e0 la partie bordures des \u00e9l\u00e9ments dans ma pr\u00e9sentation La propri\u00e9t\u00e9 border-radius va nous permettre d'arrondir facilement les angles de n'importe quel \u00e9l\u00e9ment. Il suffit d'indiquer la taille (\"l'importance\") de l'arrondi en pixels : p { border-radius : 10 px ; } Les marges Il faut savoir que tous les blocs poss\u00e8dent des marges. Il existe deux types de marges : les marges int\u00e9rieures ; les marges ext\u00e9rieures. Regardez bien le sch\u00e9ma qui se trouve \u00e0 la figure suivante. Sur ce bloc, j'ai mis une bordure pour qu'on rep\u00e8re mieux ses fronti\u00e8res. L'espace entre le texte et la bordure est la marge int\u00e9rieure (en vert). L'espace entre la bordure et le bloc suivant est la marge ext\u00e9rieure (en rouge). En CSS, on peut modifier la taille des marges avec les deux propri\u00e9t\u00e9s suivantes : padding : indique la taille de la marge int\u00e9rieure. \u00c0 exprimer en g\u00e9n\u00e9ral en pixels (px). margin : indique la taille de la marge ext\u00e9rieure. L\u00e0 encore, on utilise le plus souvent des pixels. Les balises de type inline poss\u00e8dent \u00e9galement des marges. Vous pouvez donc aussi essayer ces manipulations sur ce type de balises. Pour bien voir les marges, prenons deux paragraphes auxquels j'applique simplement une petite bordure (figure suivante) : p { width : 350 px ; border : 1 px solid black ; text-align : justify ; } Comme vous pouvez le constater, il n'y a par d\u00e9faut pas de marge int\u00e9rieure ( padding ). En revanche, il y a une marge ext\u00e9rieure ( margin ). C'est cette marge qui fait que deux paragraphes ne sont pas coll\u00e9s et qu'on a l'impression de \u00ab sauter une ligne \u00bb. Les marges par d\u00e9faut ne sont pas les m\u00eames pour toutes les balises de type block. Essayez d'appliquer ce CSS \u00e0 des balises <div> qui contiennent du texte, par exemple : vous verrez que, dans ce cas, il n'y a par d\u00e9faut ni marge int\u00e9rieure, ni marge ext\u00e9rieure ! Supposons que je veuille rajouter une marge int\u00e9rieure de 12 px aux paragraphes (figure suivante) : p { width : 350 px ; border : 1 px solid black ; text-align : justify ; padding : 12 px ; /* Marge int\u00e9rieure de 12px */ } Maintenant, je veux que mes paragraphes soient plus espac\u00e9s entre eux. Je rajoute la propri\u00e9t\u00e9 margin pour demander \u00e0 ce qu'il y ait 50 px de marge entre deux paragraphes (figure suivante) : p { width : 350 px ; border : 1 px solid black ; text-align : justify ; padding : 12 px ; margin : 50 px ; /* Marge ext\u00e9rieure de 50px */ } Notez que margin (comme padding d'ailleurs) s'applique aux quatre c\u00f4t\u00e9s du bloc. Si vous voulez sp\u00e9cifier des marges diff\u00e9rentes en haut, en bas, \u00e0 gauche et \u00e0 droite, il va falloir utiliser des propri\u00e9t\u00e9s plus pr\u00e9cises. En haut, \u00e0 droite, en bas, \u00e0 gauche, \u2026 Et on recommence ! L'id\u00e9al serait que vous reteniez les termes suivants en anglais : - top : haut ; - bottom : bas ; - left : gauche ; - right : droite. Ainsi, vous pouvez retrouver toutes les propri\u00e9t\u00e9s de t\u00eate. Je vais quand m\u00eame vous faire la liste des propri\u00e9t\u00e9s pour margin et padding , histoire que vous soyez s\u00fbrs que vous avez compris le principe. Voici la liste pour margin : margin-top : marge ext\u00e9rieure en haut ; margin-bottom : marge ext\u00e9rieure en bas ; margin-left : marge ext\u00e9rieure \u00e0 gauche ; margin-right : marge ext\u00e9rieure \u00e0 droite. Et la liste pour padding : padding-top : marge int\u00e9rieure en haut ; padding-bottom : marge int\u00e9rieure en bas ; padding-left : marge int\u00e9rieure \u00e0 gauche ; padding-right : marge int\u00e9rieure \u00e0 droite. Il y a d'autres fa\u00e7ons de sp\u00e9cifier les marges avec les propri\u00e9t\u00e9s margin et padding . Par exemple : margin: 2px 0 3px 1px; signifie \"2 px de marge en haut, 0 px \u00e0 droite (le px est facultatif dans ce cas), 3 px en bas, 1 px \u00e0 gauche\". Autre notation raccourcie : margin: 2px 1px; signifie \"2 px de marge en haut et en bas, 1 px de marge \u00e0 gauche et \u00e0 droite\". \u2192 Je vous renvoie \u00e9galement \u00e0 la partie marge des \u00e9l\u00e9ments dans ma pr\u00e9sentation En r\u00e9sum\u00e9 On distingue deux principaux types de balises en HTML : Le type block ( <p> , <h1> , etc.) : ces balises cr\u00e9ent un retour \u00e0 la ligne et occupent par d\u00e9faut toute la largeur disponible. Elles se suivent de haut en bas. Le type inline ( <a> , <strong> , etc.) : ces balises d\u00e9limitent du texte au milieu d'une ligne. Elles se suivent de gauche \u00e0 droite. On peut modifier la taille d'une balise de type block avec les propri\u00e9t\u00e9s CSS width (largeur) et height (hauteur). On peut d\u00e9finir des minima et maxima autoris\u00e9s pour la largeur et la hauteur : min-width , max-width , min-height , max-height . Les \u00e9l\u00e9ments de la page disposent chacun de marges int\u00e9rieures ( padding ) et ext\u00e9rieures ( margin ). \u00c0 vous de jouer Reprenez le site ; ou t\u00e9l\u00e9chargez cette base . En CSS, en jouant avec les propri\u00e9t\u00e9s de taille et de marge, limitez la largeur du contenu de votre page ou d'une partie de votre page (la <section> principale par exemple).","title":"Ch.3 - Le mod\u00e8le de bo\u00eetes"},{"location":"Ch03_boite/#le-modele-de-boites","text":"Cette partie est quasi-int\u00e9gralement reprise de l'excellent cours de Mathieu Nebra sur Openclassroom : Apprenez \u00e0 cr\u00e9er votre site web avec HTML5 et CSS3 Une page web peut \u00eatre vue comme une succession et un empilement de bo\u00eetes, qu'on appelle \"blocs\". La plupart des \u00e9l\u00e9ments vus au chapitre pr\u00e9c\u00e9dent sont des blocs : <header> , <article> , <nav> , etc. Mais nous connaissions d\u00e9j\u00e0 d'autres blocs : les paragraphes <p> , les titres <h1> , etc. Dans ce chapitre, nous allons apprendre \u00e0 manipuler ces blocs comme de v\u00e9ritables bo\u00eetes. Nous allons leur donner des dimensions, les agencer en jouant sur leurs marges, mais aussi apprendre \u00e0 g\u00e9rer leur contenu\u2026 pour \u00e9viter que le texte ne d\u00e9passe de ces blocs ! Ce sont des notions fondamentales dont nous allons avoir besoin pour mettre en page notre site web.","title":"Le mod\u00e8le de bo\u00eetes"},{"location":"Ch03_boite/#les-balises-de-type-block-et-inline","text":"En HTML, la plupart des balises peuvent se ranger dans l'une ou l'autre de deux cat\u00e9gories : Les balises inline : c'est le cas par exemple des liens <a></a> Les balises block : c'est le cas par exemple des paragraphes <p></p> . Il existe en fait plusieurs autres cat\u00e9gories tr\u00e8s sp\u00e9cifiques, par exemple pour les cellules de tableau (type table-cell ) ou les puces (type list-item ). Nous n'allons pas nous y int\u00e9resser pour le moment car ces balises sont minoritaires. Mais comment reconna\u00eetre une balise inline d'une balise block ? C'est en fait assez facile : block : une balise de type block sur votre page web cr\u00e9e automatiquement un retour \u00e0 la ligne avant et apr\u00e8s. Il suffit d'imaginer tout simplement un bloc. Votre page web sera en fait constitu\u00e9e d'une s\u00e9rie de blocs les uns \u00e0 la suite des autres. Mais vous verrez qu'en plus, il est possible de mettre un bloc \u00e0 l'int\u00e9rieur d'un autre, ce qui va augmenter consid\u00e9rablement nos possibilit\u00e9s pour cr\u00e9er le design de notre site ! inline : une balise de type inline se trouve obligatoirement \u00e0 l'int\u00e9rieur d'une balise block. Une balise inline ne cr\u00e9e pas de retour \u00e0 la ligne, le texte qui se trouve \u00e0 l'int\u00e9rieur s'\u00e9crit donc \u00e0 la suite du texte pr\u00e9c\u00e9dent, sur la m\u00eame ligne (c'est pour cela que l'on parle de balise \"en ligne\"). Depuis HTML5, la cat\u00e9gorisation des diff\u00e9rents \u00e9l\u00e9ments est un peu plus complexe que cela. Cependant, cette petite simplification va vous permettre de bien comprendre la diff\u00e9rence entre le concept de \"bloc\" et le concept de \"en ligne\". Pour bien visualiser le concept, voici un petit sch\u00e9ma : Sur fond bleu, vous avez tout ce qui est de type block. Sur fond jaune, vous avez tout ce qui est de type inline. Comme vous pouvez le voir, les blocs sont les uns en-dessous des autres. On peut aussi les imbriquer les uns \u00e0 l'int\u00e9rieur des autres. La balise inline <a></a> , elle, se trouve \u00e0 l'int\u00e9rieur d'une balise block et le texte vient s'ins\u00e9rer sur la m\u00eame ligne. Si vous voulez avoir la liste compl\u00e8te des balises qui existent et savoir si elles sont de type inline ou block, reportez-vous \u00e0 l' annexe donnant la liste des balises HTML .","title":"Les balises de type block et inline"},{"location":"Ch03_boite/#les-balises-universelles","text":"Vous les connaissez d\u00e9j\u00e0 car je vous les ai pr\u00e9sent\u00e9es il y a quelques chapitres. Ce sont des balises qui n'ont aucun sens particulier (contrairement \u00e0 <p> qui veut dire \"paragraphe\", <strong> \"important\", etc.). Le principal int\u00e9r\u00eat de ces balises est que l'on peut leur appliquer une class pour le CSS quand aucune autre balise ne convient. Il existe deux balises g\u00e9n\u00e9riques et, comme par hasard, la seule diff\u00e9rence entre les deux est que l'une d'elle est inline et l'autre est block : <span></span> ( inline ) ; <div></div> ( block ).","title":"Les balises universelles"},{"location":"Ch03_boite/#respectez-la-semantique","text":"Les balises universelles sont \"pratiques\" dans certains cas, certes, mais attention \u00e0 ne pas en abuser. Je tiens \u00e0 vous avertir de suite : beaucoup de webmasters mettent des <div> et des <span> trop souvent et oublient que d'autres balises plus adapt\u00e9es existent. Exemple d'un span inutile : <span class=\"important\"> . Je ne devrais jamais voir ceci dans un de vos codes alors qu'il existe la balise <strong> qui sert \u00e0 indiquer l'importance ! Exemple d'un div inutile : <div class=\"titre\"> . Ceci est compl\u00e8tement absurde puisqu'il existe des balises faites sp\u00e9cialement pour les titres ( <h1> , <h2> \u2026). Vous allez me dire qu'au final le r\u00e9sultat (visuel) est le m\u00eame. Je suis tout \u00e0 fait d'accord. Mais les balises g\u00e9n\u00e9riques n'apportent aucun sens \u00e0 la page et ne peuvent pas \u00eatre comprises par l'ordinateur. Utilisez toujours d'autres balises plus adapt\u00e9es quand c'est possible. Google lui-m\u00eame le conseille pour vous aider \u00e0 am\u00e9liorer la position de vos pages au sein de ses r\u00e9sultats de recherche !","title":"Respectez la s\u00e9mantique !"},{"location":"Ch03_boite/#les-dimensions","text":"Nous allons ici travailler uniquement sur des balises de type block. Pour commencer, int\u00e9ressons-nous \u00e0 la taille des blocs. Contrairement \u00e0 un inline, un bloc a des dimensions pr\u00e9cises. Il poss\u00e8de une largeur et une hauteur. Ce qui fait, \u00f4 surprise, qu'on dispose de deux propri\u00e9t\u00e9s CSS : width : c'est la largeur du bloc. \u00c0 exprimer en pixels (px) ou en pourcentage (%). height : c'est la hauteur du bloc. L\u00e0 encore, on l'exprime soit en pixels (px), soit en pourcentage (%). Pour \u00eatre exact, width et height repr\u00e9sentent la largeur et la hauteur du contenu des blocs. Si le bloc a des marges (on va d\u00e9couvrir ce principe un peu plus loin), celles-ci s'ajouteront \u00e0 la largeur et la hauteur. Par d\u00e9faut, un bloc prend 100% de la largeur disponible. On peut le v\u00e9rifier en appliquant \u00e0 nos blocs des bordures ou une couleur de fond (figure suivante). Maintenant, rajoutons un peu de CSS afin de modifier la largeur des paragraphes. Le CSS suivant dit : \u00ab Je veux que tous mes paragraphes aient une largeur de 50% \u00bb. p { width : 50 % ; } Le r\u00e9sultat est visible \u00e0 la figure suivante : Les pourcentages seront utiles pour cr\u00e9er un design qui s'adapte automatiquement \u00e0 la r\u00e9solution d'\u00e9cran du visiteur. Toutefois, il se peut que vous ayez besoin de cr\u00e9er des blocs ayant une dimension pr\u00e9cise en pixels : p { width : 250 px ; }","title":"Les dimensions"},{"location":"Ch03_boite/#minimum-et-maximum","text":"On peut demander \u00e0 ce qu'un bloc ait des dimensions minimales et maximales. C'est tr\u00e8s pratique car cela nous permet de d\u00e9finir des dimensions \u00ab limites \u00bb pour que notre site s'adapte aux diff\u00e9rentes r\u00e9solutions d'\u00e9cran de nos visiteurs : min-width : largeur minimale ; min-height : hauteur minimale ; max-width : largeur maximale ; max-height : hauteur maximale. Par exemple, on peut demander \u00e0 ce que les paragraphes occupent 50% de la largeur et exiger qu'il fassent au moins 400 pixels de large dans tous les cas : p { width : 50 % ; min-width : 400 px ; } Observez le r\u00e9sultat en modifiant la largeur de la fen\u00eatre de votre navigateur. Vous allez voir que, si celle-ci est trop petite, le paragraphe se force \u00e0 occuper au moins 400 pixels de largeur.","title":"Minimum et maximum"},{"location":"Ch03_boite/#les-bordures","text":"Le CSS vous offre un large choix de bordures pour d\u00e9corer votre page. De nombreuses propri\u00e9t\u00e9s CSS vous permettent de modifier l'apparence de vos bordures : border-width , border-color , border-style , etc. Je vous renvoie \u00e0 la partie bordures des \u00e9l\u00e9ments dans ma pr\u00e9sentation La propri\u00e9t\u00e9 border-radius va nous permettre d'arrondir facilement les angles de n'importe quel \u00e9l\u00e9ment. Il suffit d'indiquer la taille (\"l'importance\") de l'arrondi en pixels : p { border-radius : 10 px ; }","title":"Les bordures"},{"location":"Ch03_boite/#les-marges","text":"Il faut savoir que tous les blocs poss\u00e8dent des marges. Il existe deux types de marges : les marges int\u00e9rieures ; les marges ext\u00e9rieures. Regardez bien le sch\u00e9ma qui se trouve \u00e0 la figure suivante. Sur ce bloc, j'ai mis une bordure pour qu'on rep\u00e8re mieux ses fronti\u00e8res. L'espace entre le texte et la bordure est la marge int\u00e9rieure (en vert). L'espace entre la bordure et le bloc suivant est la marge ext\u00e9rieure (en rouge). En CSS, on peut modifier la taille des marges avec les deux propri\u00e9t\u00e9s suivantes : padding : indique la taille de la marge int\u00e9rieure. \u00c0 exprimer en g\u00e9n\u00e9ral en pixels (px). margin : indique la taille de la marge ext\u00e9rieure. L\u00e0 encore, on utilise le plus souvent des pixels. Les balises de type inline poss\u00e8dent \u00e9galement des marges. Vous pouvez donc aussi essayer ces manipulations sur ce type de balises. Pour bien voir les marges, prenons deux paragraphes auxquels j'applique simplement une petite bordure (figure suivante) : p { width : 350 px ; border : 1 px solid black ; text-align : justify ; } Comme vous pouvez le constater, il n'y a par d\u00e9faut pas de marge int\u00e9rieure ( padding ). En revanche, il y a une marge ext\u00e9rieure ( margin ). C'est cette marge qui fait que deux paragraphes ne sont pas coll\u00e9s et qu'on a l'impression de \u00ab sauter une ligne \u00bb. Les marges par d\u00e9faut ne sont pas les m\u00eames pour toutes les balises de type block. Essayez d'appliquer ce CSS \u00e0 des balises <div> qui contiennent du texte, par exemple : vous verrez que, dans ce cas, il n'y a par d\u00e9faut ni marge int\u00e9rieure, ni marge ext\u00e9rieure ! Supposons que je veuille rajouter une marge int\u00e9rieure de 12 px aux paragraphes (figure suivante) : p { width : 350 px ; border : 1 px solid black ; text-align : justify ; padding : 12 px ; /* Marge int\u00e9rieure de 12px */ } Maintenant, je veux que mes paragraphes soient plus espac\u00e9s entre eux. Je rajoute la propri\u00e9t\u00e9 margin pour demander \u00e0 ce qu'il y ait 50 px de marge entre deux paragraphes (figure suivante) : p { width : 350 px ; border : 1 px solid black ; text-align : justify ; padding : 12 px ; margin : 50 px ; /* Marge ext\u00e9rieure de 50px */ } Notez que margin (comme padding d'ailleurs) s'applique aux quatre c\u00f4t\u00e9s du bloc. Si vous voulez sp\u00e9cifier des marges diff\u00e9rentes en haut, en bas, \u00e0 gauche et \u00e0 droite, il va falloir utiliser des propri\u00e9t\u00e9s plus pr\u00e9cises.","title":"Les marges"},{"location":"Ch03_boite/#en-haut-a-droite-en-bas-a-gauche-et-on-recommence","text":"L'id\u00e9al serait que vous reteniez les termes suivants en anglais : - top : haut ; - bottom : bas ; - left : gauche ; - right : droite. Ainsi, vous pouvez retrouver toutes les propri\u00e9t\u00e9s de t\u00eate. Je vais quand m\u00eame vous faire la liste des propri\u00e9t\u00e9s pour margin et padding , histoire que vous soyez s\u00fbrs que vous avez compris le principe. Voici la liste pour margin : margin-top : marge ext\u00e9rieure en haut ; margin-bottom : marge ext\u00e9rieure en bas ; margin-left : marge ext\u00e9rieure \u00e0 gauche ; margin-right : marge ext\u00e9rieure \u00e0 droite. Et la liste pour padding : padding-top : marge int\u00e9rieure en haut ; padding-bottom : marge int\u00e9rieure en bas ; padding-left : marge int\u00e9rieure \u00e0 gauche ; padding-right : marge int\u00e9rieure \u00e0 droite. Il y a d'autres fa\u00e7ons de sp\u00e9cifier les marges avec les propri\u00e9t\u00e9s margin et padding . Par exemple : margin: 2px 0 3px 1px; signifie \"2 px de marge en haut, 0 px \u00e0 droite (le px est facultatif dans ce cas), 3 px en bas, 1 px \u00e0 gauche\". Autre notation raccourcie : margin: 2px 1px; signifie \"2 px de marge en haut et en bas, 1 px de marge \u00e0 gauche et \u00e0 droite\". \u2192 Je vous renvoie \u00e9galement \u00e0 la partie marge des \u00e9l\u00e9ments dans ma pr\u00e9sentation","title":"En haut, \u00e0 droite, en bas, \u00e0 gauche, \u2026 Et on recommence !"},{"location":"Ch03_boite/#en-resume","text":"On distingue deux principaux types de balises en HTML : Le type block ( <p> , <h1> , etc.) : ces balises cr\u00e9ent un retour \u00e0 la ligne et occupent par d\u00e9faut toute la largeur disponible. Elles se suivent de haut en bas. Le type inline ( <a> , <strong> , etc.) : ces balises d\u00e9limitent du texte au milieu d'une ligne. Elles se suivent de gauche \u00e0 droite. On peut modifier la taille d'une balise de type block avec les propri\u00e9t\u00e9s CSS width (largeur) et height (hauteur). On peut d\u00e9finir des minima et maxima autoris\u00e9s pour la largeur et la hauteur : min-width , max-width , min-height , max-height . Les \u00e9l\u00e9ments de la page disposent chacun de marges int\u00e9rieures ( padding ) et ext\u00e9rieures ( margin ).","title":"En r\u00e9sum\u00e9"},{"location":"Ch03_boite/#a-vous-de-jouer","text":"Reprenez le site ; ou t\u00e9l\u00e9chargez cette base . En CSS, en jouant avec les propri\u00e9t\u00e9s de taille et de marge, limitez la largeur du contenu de votre page ou d'une partie de votre page (la <section> principale par exemple).","title":"\u00c0 vous de jouer"},{"location":"Ch04_pratique/","text":"HTML et CSS en pratique Comment fait-on un bouton ? Finalement, un bouton, c'est quoi ? C'est tout simplement un lien hypertexte qui a une forme particuli\u00e8re et qui peut changer d'\u00e9tat en fonction de l'action de la souris (survol, clic, ...). < a href = \"#\" > Cliquez ici </ a > a { color : #FFFFFF ; /*Texte blanc*/ background-color : red ; /*Fond rouge*/ padding : 10 px ; /*Marge int\u00e9rieure de 10px*/ } Si l'on se contente du s\u00e9lecteur a , tous les liens hypertextes de ma page web prendront ce style. C'est n'es pas forc\u00e9ment tr\u00e8s judicieux car certains \u00e9l\u00e9ments <a> de mon site doivent rester des liens hypertextes classiques. La bonne m\u00e9thode est de cr\u00e9er une classe (appelons-la btn pour \"bouton\"). En HTML nous donnerons cette classe btn aux liens qui doivent \u00eatre des boutons. En CSS nous d\u00e9finirons les styles pour les \u00e9l\u00e9ment a ayant la classe btn . Comme ceci : < a href = \"#\" class = \"btn\" > Cliquez ici </ a > a . btn { /*Tous les liens (<a>) ayant la classe \"btn\"*/ color : #FFFFFF ; /*Texte blanc*/ background-color : blue ; /*Fond bleu*/ padding : 10 px ; /*Marge int\u00e9rieure de 10px*/ } Allons plus loin. En CSS, nous allons pouvoir ajouter des pseudo-classes qui vont nous permettre de sp\u00e9cifier l'apparence d'un \u00e9l\u00e9ment en fonction de l'action de la souris. Ainsi, la pseudo-classe :hover permet de sp\u00e9cifier l'apparence d'un \u00e9l\u00e9ment au moment o\u00f9 l'utilisateur le survole avec le pointeur, sans n\u00e9cessairement l'activer. La pseudo-class :active permet de sp\u00e9cifier l'apparence d'un \u00e9l\u00e9ment au moment o\u00f9 l'utilisateur clique dessus. Il existe d'autres pseudo-classes : :link , :visited , focus ... Je laisse le loin \u00e0 ceux qui souhaite aller plus loin de les d\u00e9couvrir par vous m\u00eame. En pratique, < a href = \"#\" class = \"btn\" > Cliquez ici </ a > a . btn { /* Affichage par d\u00e9faut */ color : #FFFFFF ; /*Texte blanc*/ background-color : blue ; /*Fond bleu*/ padding : 10 px ; /*Marge int\u00e9rieure de 10px*/ } a . btn : hover { /* Au survol */ background-color : red ; /*Fond bleu*/ } a . btn : active { /* Au clic */ color : red ; /*Texte rouge */ background-color : #FFFFFF ; /*Fond blanc*/ } \u00c0 vous de jouer Reprenez votre site. Dans chaque page HTML, ajouter un bouton (\u00e9l\u00e9ment <a> avec la classe btn ) renvoyant vers Wikip\u00e9dia. Dans le fichier CSS d\u00e9finissez les styles pour la classe btn . Pensez \u00e0 utiliser les pseudo-classes\" pour modifier le style du bouton en fonction de l'action de la souris. Comment fait-on un menu de navigation ? La bonne pratique est de cr\u00e9er un liste non-ordonn\u00e9es ( <ul> ) de liens hypertexte ( <a> ) en HTML puis de la stylisez en CSS pour \"casser\" notamment l'aspect par d\u00e9faut d'un liste (sens vertical, puce pour chaque item, ...). N'oublions pas de dire qu'il s'agit du menu de navigation principal grace \u00e0 la balise <nav> . En pratique, < nav > < ul > < li >< a href = \"#\" > Element 1 </ a ></ li > < li >< a href = \"#\" > Element 2 </ a ></ li > < li >< a href = \"#\" > Element 3 </ a ></ li > </ ul > </ nav > D'abord, on red\u00e9finit l'aspect de la liste (plus d'indentation, plus de puce) : nav ul { /* \u00e9l\u00e9ments <ul> qui sont dans un \u00e9l\u00e9ment <nav> */ padding : 0 ; /* pas de marge int\u00e9rieure */ margin : 0 ; /* pas de marge ext\u00e9rieure */ list-style-type : none ; /* pas de puce */ } Pour un menu horizontal, on modifie le comportement par d\u00e9faut des \u00e9l\u00e9ments li . Par d\u00e9faut, ces \u00e9l\u00e9ments sont de type block, donc les uns en dessous des autres. On va modifier leur type en inline-block gr\u00e2ce \u00e0 la propri\u00e9t\u00e9 display. Il appara\u00eetront donc les uns \u00e0 cot\u00e9 des autres. nav li { /* \u00e9l\u00e9ments <li> qui sont dans un \u00e9l\u00e9ment <nav> */ display : inline-block ; } Ensuite, ce n'est qu'une question d\u2019esth\u00e9tisme. On modifie les couleurs la taille, les marges, l'alignement des items. On r\u00e9utilise les pseudo-classes vues dans \"Comment fait-on un bouton ?\" pour modifier l'aspect des \u00e9l\u00e9ments au survol de la souris. Le code entier : < nav > < ul > < li >< a href = \"#\" > \u00c9l\u00e9ment 1 </ a ></ li > < li >< a href = \"#\" > \u00c9l\u00e9ment 2 </ a ></ li > < li >< a href = \"#\" > \u00c9l\u00e9ment 3 </ a ></ li > </ ul > </ nav > nav ul { /* \u00e9l\u00e9ments <ul> qui sont dans un \u00e9l\u00e9ment <nav> */ padding : 0 ; /* pas de marge int\u00e9rieure */ margin : 0 ; /* pas de marge ext\u00e9rieure */ list-style-type : none ; /* pas de puce */ background-color : #333333 ; /* fond gris fonc\u00e9 */ } nav li { /* \u00e9l\u00e9ments <li> qui sont dans un \u00e9l\u00e9ment <nav> */ display : inline-block ; /* passage \u00e0 l'horizontale */ width : 100 px ; /* chaque \u00e9l\u00e9ment fait 100px;*/ height : 40 px ; /* hauteur 40px; */ text-align : center ; /* texte centr\u00e9 horizontalement */ line-height : 40 px ; /* texte centr\u00e9 verticalement (m\u00eame nombre que la propri\u00e9t\u00e9 height) */ padding : 0 px ; /* pas de marge interne */ margin : 0 px ; /* pas de marge externe */ } nav li a { /*\u00e9l\u00e9ments <a> qui sont dans un \u00e9l\u00e9ment <li> qui est lui-m\u00eame dans un \u00e9l\u00e9ment <nav> */ display : block ; /* pour que la zone cliquable prenne toute la taille de l'\u00e9l\u00e9ment li */ text-decoration : none ; /* pas de soulignement */ color : white ; /* texte en blanc */ } nav li : hover { /* au survol d'un \u00e9l\u00e9ment <li>*/ background-color : #666666 ; /* fond gris clair */ } \u00c0 vous de jouer Reprenez votre site. Dans chaque page HTML, ajouter un menu permettant de naviguer entre les diff\u00e9rentes pages de votre site ; si ce n'est d\u00e9j\u00e0 fait ;) . Dans le fichier CSS d\u00e9finissez les styles pour ce menu. Pensez \u00e0 utiliser les pseudo-classes\" pour modifier le style des \u00e9l\u00e9ments du menu en fonction de l'action de la souris. Entra\u00eenez-vous ! Une correction sera donn\u00e9e la semaine prochaine.","title":"Ch.4 - En pratique"},{"location":"Ch04_pratique/#html-et-css-en-pratique","text":"","title":"HTML et CSS en pratique"},{"location":"Ch04_pratique/#comment-fait-on-un-bouton","text":"Finalement, un bouton, c'est quoi ? C'est tout simplement un lien hypertexte qui a une forme particuli\u00e8re et qui peut changer d'\u00e9tat en fonction de l'action de la souris (survol, clic, ...). < a href = \"#\" > Cliquez ici </ a > a { color : #FFFFFF ; /*Texte blanc*/ background-color : red ; /*Fond rouge*/ padding : 10 px ; /*Marge int\u00e9rieure de 10px*/ } Si l'on se contente du s\u00e9lecteur a , tous les liens hypertextes de ma page web prendront ce style. C'est n'es pas forc\u00e9ment tr\u00e8s judicieux car certains \u00e9l\u00e9ments <a> de mon site doivent rester des liens hypertextes classiques. La bonne m\u00e9thode est de cr\u00e9er une classe (appelons-la btn pour \"bouton\"). En HTML nous donnerons cette classe btn aux liens qui doivent \u00eatre des boutons. En CSS nous d\u00e9finirons les styles pour les \u00e9l\u00e9ment a ayant la classe btn . Comme ceci : < a href = \"#\" class = \"btn\" > Cliquez ici </ a > a . btn { /*Tous les liens (<a>) ayant la classe \"btn\"*/ color : #FFFFFF ; /*Texte blanc*/ background-color : blue ; /*Fond bleu*/ padding : 10 px ; /*Marge int\u00e9rieure de 10px*/ } Allons plus loin. En CSS, nous allons pouvoir ajouter des pseudo-classes qui vont nous permettre de sp\u00e9cifier l'apparence d'un \u00e9l\u00e9ment en fonction de l'action de la souris. Ainsi, la pseudo-classe :hover permet de sp\u00e9cifier l'apparence d'un \u00e9l\u00e9ment au moment o\u00f9 l'utilisateur le survole avec le pointeur, sans n\u00e9cessairement l'activer. La pseudo-class :active permet de sp\u00e9cifier l'apparence d'un \u00e9l\u00e9ment au moment o\u00f9 l'utilisateur clique dessus. Il existe d'autres pseudo-classes : :link , :visited , focus ... Je laisse le loin \u00e0 ceux qui souhaite aller plus loin de les d\u00e9couvrir par vous m\u00eame. En pratique, < a href = \"#\" class = \"btn\" > Cliquez ici </ a > a . btn { /* Affichage par d\u00e9faut */ color : #FFFFFF ; /*Texte blanc*/ background-color : blue ; /*Fond bleu*/ padding : 10 px ; /*Marge int\u00e9rieure de 10px*/ } a . btn : hover { /* Au survol */ background-color : red ; /*Fond bleu*/ } a . btn : active { /* Au clic */ color : red ; /*Texte rouge */ background-color : #FFFFFF ; /*Fond blanc*/ }","title":"Comment fait-on un bouton ?"},{"location":"Ch04_pratique/#a-vous-de-jouer","text":"Reprenez votre site. Dans chaque page HTML, ajouter un bouton (\u00e9l\u00e9ment <a> avec la classe btn ) renvoyant vers Wikip\u00e9dia. Dans le fichier CSS d\u00e9finissez les styles pour la classe btn . Pensez \u00e0 utiliser les pseudo-classes\" pour modifier le style du bouton en fonction de l'action de la souris.","title":"\u00c0 vous de jouer"},{"location":"Ch04_pratique/#comment-fait-on-un-menu-de-navigation","text":"La bonne pratique est de cr\u00e9er un liste non-ordonn\u00e9es ( <ul> ) de liens hypertexte ( <a> ) en HTML puis de la stylisez en CSS pour \"casser\" notamment l'aspect par d\u00e9faut d'un liste (sens vertical, puce pour chaque item, ...). N'oublions pas de dire qu'il s'agit du menu de navigation principal grace \u00e0 la balise <nav> . En pratique, < nav > < ul > < li >< a href = \"#\" > Element 1 </ a ></ li > < li >< a href = \"#\" > Element 2 </ a ></ li > < li >< a href = \"#\" > Element 3 </ a ></ li > </ ul > </ nav > D'abord, on red\u00e9finit l'aspect de la liste (plus d'indentation, plus de puce) : nav ul { /* \u00e9l\u00e9ments <ul> qui sont dans un \u00e9l\u00e9ment <nav> */ padding : 0 ; /* pas de marge int\u00e9rieure */ margin : 0 ; /* pas de marge ext\u00e9rieure */ list-style-type : none ; /* pas de puce */ } Pour un menu horizontal, on modifie le comportement par d\u00e9faut des \u00e9l\u00e9ments li . Par d\u00e9faut, ces \u00e9l\u00e9ments sont de type block, donc les uns en dessous des autres. On va modifier leur type en inline-block gr\u00e2ce \u00e0 la propri\u00e9t\u00e9 display. Il appara\u00eetront donc les uns \u00e0 cot\u00e9 des autres. nav li { /* \u00e9l\u00e9ments <li> qui sont dans un \u00e9l\u00e9ment <nav> */ display : inline-block ; } Ensuite, ce n'est qu'une question d\u2019esth\u00e9tisme. On modifie les couleurs la taille, les marges, l'alignement des items. On r\u00e9utilise les pseudo-classes vues dans \"Comment fait-on un bouton ?\" pour modifier l'aspect des \u00e9l\u00e9ments au survol de la souris. Le code entier : < nav > < ul > < li >< a href = \"#\" > \u00c9l\u00e9ment 1 </ a ></ li > < li >< a href = \"#\" > \u00c9l\u00e9ment 2 </ a ></ li > < li >< a href = \"#\" > \u00c9l\u00e9ment 3 </ a ></ li > </ ul > </ nav > nav ul { /* \u00e9l\u00e9ments <ul> qui sont dans un \u00e9l\u00e9ment <nav> */ padding : 0 ; /* pas de marge int\u00e9rieure */ margin : 0 ; /* pas de marge ext\u00e9rieure */ list-style-type : none ; /* pas de puce */ background-color : #333333 ; /* fond gris fonc\u00e9 */ } nav li { /* \u00e9l\u00e9ments <li> qui sont dans un \u00e9l\u00e9ment <nav> */ display : inline-block ; /* passage \u00e0 l'horizontale */ width : 100 px ; /* chaque \u00e9l\u00e9ment fait 100px;*/ height : 40 px ; /* hauteur 40px; */ text-align : center ; /* texte centr\u00e9 horizontalement */ line-height : 40 px ; /* texte centr\u00e9 verticalement (m\u00eame nombre que la propri\u00e9t\u00e9 height) */ padding : 0 px ; /* pas de marge interne */ margin : 0 px ; /* pas de marge externe */ } nav li a { /*\u00e9l\u00e9ments <a> qui sont dans un \u00e9l\u00e9ment <li> qui est lui-m\u00eame dans un \u00e9l\u00e9ment <nav> */ display : block ; /* pour que la zone cliquable prenne toute la taille de l'\u00e9l\u00e9ment li */ text-decoration : none ; /* pas de soulignement */ color : white ; /* texte en blanc */ } nav li : hover { /* au survol d'un \u00e9l\u00e9ment <li>*/ background-color : #666666 ; /* fond gris clair */ }","title":"Comment fait-on un menu de navigation ?"},{"location":"Ch04_pratique/#a-vous-de-jouer_1","text":"Reprenez votre site. Dans chaque page HTML, ajouter un menu permettant de naviguer entre les diff\u00e9rentes pages de votre site ; si ce n'est d\u00e9j\u00e0 fait ;) . Dans le fichier CSS d\u00e9finissez les styles pour ce menu. Pensez \u00e0 utiliser les pseudo-classes\" pour modifier le style des \u00e9l\u00e9ments du menu en fonction de l'action de la souris. Entra\u00eenez-vous ! Une correction sera donn\u00e9e la semaine prochaine.","title":"\u00c0 vous de jouer"},{"location":"Ch05_tobecontinued/","text":"\u00c0 suivre... La suite la semaine prochaine. Bon travail ... \u00e0 la maison bien s\u00fbr !","title":"Ch.5 - \u00c0 suivre"},{"location":"Ch05_tobecontinued/#a-suivre","text":"La suite la semaine prochaine. Bon travail ... \u00e0 la maison bien s\u00fbr !","title":"\u00c0 suivre..."},{"location":"Ch06_ressources/","text":"Ressources utiles : Apprendre ou r\u00e9viser : Openclassroom - Apprenez \u00e0 cr\u00e9er votre site web avec HTML5 et CSS3 W3 School - Learn HTML W3 School - Learn CSS Retrouver les balises HTML et les propri\u00e9t\u00e9s CSS W3 School - HTML reference W3 School - CSS r\u00e9f\u00e9rence Openclassroom - M\u00e9mento des balises HTML Openclassroom - M\u00e9mento des propri\u00e9t\u00e9s CSS Jouer pour se perfectionner en CSS Grid Garden - Jeu pour apprendre le syst\u00e8me de positionnement CSS par grilles Flexbox froggy - Jeu pour apprendre le systeme de positionnement CSS Flexbox CSS Diner - Jeu pour apprendre les s\u00e9lecteurs CSS","title":"Ch.6 - Quelques ressources"},{"location":"Ch06_ressources/#ressources-utiles","text":"","title":"Ressources utiles :"},{"location":"Ch06_ressources/#apprendre-ou-reviser","text":"Openclassroom - Apprenez \u00e0 cr\u00e9er votre site web avec HTML5 et CSS3 W3 School - Learn HTML W3 School - Learn CSS","title":"Apprendre ou r\u00e9viser :"},{"location":"Ch06_ressources/#retrouver-les-balises-html-et-les-proprietes-css","text":"W3 School - HTML reference W3 School - CSS r\u00e9f\u00e9rence Openclassroom - M\u00e9mento des balises HTML Openclassroom - M\u00e9mento des propri\u00e9t\u00e9s CSS","title":"Retrouver les balises HTML et les propri\u00e9t\u00e9s CSS"},{"location":"Ch06_ressources/#jouer-pour-se-perfectionner-en-css","text":"Grid Garden - Jeu pour apprendre le syst\u00e8me de positionnement CSS par grilles Flexbox froggy - Jeu pour apprendre le systeme de positionnement CSS Flexbox CSS Diner - Jeu pour apprendre les s\u00e9lecteurs CSS","title":"Jouer pour se perfectionner en CSS"}]}